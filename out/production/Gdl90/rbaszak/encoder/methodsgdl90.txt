//GENERATING GDL90 MESSAGES
//***********
//
//Frame Check Sequence (FCS)
//Append at the end of msg.
//Convert existing control-escape and flag bytes so there's no interference.
//[0x7E <message ID> <message> <FCS> 0x7E]
//If 0x7E/0x7D found then insert Control-Escape(0x7D) followed by original byte XOR'ed with val 0x20
//0x7E = 0x7D 0x5E
//0x7D = 0x7D 0x5D
//
//***********
//GDL90 Reqiured data for each message ID
//
//HEARTBEAT (1/sec)
//
// - 0(10) message id
// - Status 1 (GPS Pos/Maintenance/IDENT talkback/GPS battery low)
// - Status 2 (UAT time stamp/CSA Requested/UTC OK)
// - 4-5 Time stamp (UAT)
// - 6-7 message counts (UAT)
//[0x7E 0x00 0x81 0x41 0xDB 0xD0 0x08 0x02 0xB3 0x8B 0x7E]
//
//***********
//OWNSHIP REPORT
//
// - 10(10) message id
// - participant address
// - latitude
// - longitude
// - altitude
// - NIC (Navigation Integrity Category)
// - NACp (Navigation Accuracy Category for Position)
// - horizontal velocity
// - vertical velocity
// - track/heading
// - emitter category
// - call sign
//
//***********
//OWNSHIP GEOMETRIC ALTITUDE MESSAGE (1/sec)
//
// - 11(10) message id
// - geo alt in 5 ft. resolution WGS-84
// - vertical warning indicator, vertical FoM in meters
//
//***********
//TRAFFIC REPORT
//
// - 20(10) message id
// - participant address
// - latitude
// - longitude
// - altitude
// - NIC (Navigation Integrity Category)
// - NACp (Navigation Accuracy Category for Position)
// - horizontal velocity
// - vertical velocity
// - track/heading
// - emitter category
// - call sign
//
//***********
//FOREFLIGHT ID MESSAGE
//
// - 0x65 Message ID
// - Device serial number
// - Device name
// - Capabilities (WGS-84/MSL)
//
//***********

//IGps data
//
//VelocityNS
//VelocityEW
//GroundSpeed
//TrackAngle
//IsValidUTCTime
//UTCTime
//TrueHeading
//Latitude
//Longitude
//IsValidPVT
//Altitude (HAE/MSL)

#include "genGdl.h"
#include "Device.h"
#include "GpsData.h"
#include "Kernel/timer.h"
#include <string.h>
#include <math.h>

uint16 Crc16Table[256];
void crcInit();
uint16 crcCompute(char *block, int length);

//-----------------------
//The actual calculation of the CRC can be accomplished using the following function.
//----CRC-IBM ALREADY IMPLEMENTED IN ADSBSRV----
//----NEW CRC-CCITT IMPLEMENTED----

//FCS Frame Check Sequence
void FCS(char *newMsg, char *msg, size_t msgLength, short unsigned int *shift)
{
	newMsg[0] = msg[0];

	uint16 j = 1;
	uint16 i = 1;

	for(i; i<msgLength; i++)
	{
		if((msg[i] == 0x7D || msg[i] == 0x7E) && i<msgLength-1)	//XOR with 0x20 when found flag or control-escape character
		{
			(*shift)++;
			newMsg[j] = 0x7D;
			newMsg[j+1] = msg[i] ^ 0x20;
			j =	j+2;	//j shifts two times
		}
		else
		{
			newMsg[j] = msg[i];		//Copy unchanged bytes
			j++;
		}
	}
}

//CRC, FCS and Flag - Not required in future version
/*extern void prepareToSend(char *msg, size_t msgLength)
{
	msg++;
	uint16 i = 0;

	char payload[39];

	for(i=0; i<msgLength-3;i++)	//Copy payload
	{
		payload[i] = *msg;
		msg++;
	}

	//crcInit();
	uint16 crc16 = crcCompute(payload,msgLength-3);

	*msg = crc16 >> 8;
	msg++;
	*msg = crc16 & 0xFF;
	msg++;

	*msg = 0x7F;

	//FCS(ready, len);
}*/

//GDL90 Heartbeat Message
void genHeartbeat(char *message, size_t length)
{
	//char payload[7] = {0x00,0x01,0x00,0x00,0x00,0x00,0x00};
	uint16 i = 0;

	message[0] = 0x7E;	//Flag byte

	message[1] = 0x00;	//Message ID

	//Ignored bytes
	message[2] = 0x81;
	message[3] = 0x00;
	message[4] = 0x00;
	message[5] = 0x00;
	message[6] = 0x00;
	message[7] = 0x00;

	char payload[8];
	memcpy(payload,message+1,7);
	payload[7] = 0;

	//CRC
	uint16 crc16 = crcCompute(payload,length-4);

	message[8] = crc16 & 0xFF;
	message[9] = crc16 >> 8;

	message[10] = 0x7E;	//Flag byte
}

//ForeFlight GDL90 ID Message
void genIDMessage(char *message, size_t length)
{
	message[0] = 0x7E; //Flag byte

	message[1] = 0x65; //Message ID

	message[2] = 0x00; //Sub-ID must be 0

	message[3] = 0x01; //Version. Must be 1

	uint16 i = 0;

	for(i=0; i<8;i++)
	{
		message[i+4] = serialNum[i];	//Device serial number
	}
	for(i=0; i<8;i++)
	{
		message[i+12] = deviceName[i];	//Device short name - 8b
	}
	for(i=0; i<16;i++)
	{
		message[i+20] = deviceLongName[i]; //Device long name - 16b
	}

	for(i=0; i<4;i++)
	{
		message[i+36] = capabilities[i]; //Capabilities mask
	}

	char payload[40];
	memcpy(payload,message+1,39);
	payload[39] = 0;

	//CRC
	uint16 crc16 = crcCompute(payload,length-4);

	message[40] = crc16 & 0xFF;
	message[41] = crc16 >> 8;

	message[42] = 0x7E; //Flag byte
}

//GDL90 Ownship Report Message
void genOwnship(char *message, size_t length)
{
	message[0] = 0x7E;	//Flag byte
	message[1] = 0x0A;	//MessageID

	//Traffic Alert Status / Address Type
	message[2] = 0x00;

	//ICAO Address
	message[3] = (ICAOaddress >> 16) & 0xFF;
	message[4] = (ICAOaddress >> 8) & 0xFF;
	message[5] = ICAOaddress & 0xFF;

	//LatLong
	char tmp[3];

	makeLatLng(GpsLat, tmp);	//Make latitude
	message[6] = tmp[0]; // Latitude.
	message[7] = tmp[1]; // Latitude.
	message[8] = tmp[2]; // Latitude.

	makeLatLng(GpsLng, tmp);	//Make longitude
	message[9] = tmp[0];  // Longitude.
	message[10] = tmp[1];  // Longitude.
	message[11] = tmp[2]; // Longitude.

	//If Altitude Unavailable
	if(BaroAlt == 999999){
		uint16 altitudeint = 0xFFF & 0x09;
		message[12] = altitudeint;
		message[13] = altitudeint << 8;
	}else
	{
		char altitude[2];
		uint32 tmpAlt = (BaroAlt + 1000)/25;

		altitude[0] = (tmpAlt & 0x000FF0) >> 4;
		altitude[1] = ((tmpAlt & 0x0000FF));
		altitude[1] = (altitude[1] << 4) ^ 0x09;

		message[12] = altitude[0];
		message[13] = altitude[1];
	}

	message[14] = (0xA << 4) ^ 0x09; //10, 9; NIC, NACP

	char horizontalVel[2];	//Horizontal velocity
	if(NULL == VelHorizontal)
	{
		horizontalVel[0] = 0xFF;
		horizontalVel[1] = 0xF0;
	}else
	{
		horizontalVel[0] = 0x00;
		horizontalVel[1] = VelHorizontal;
	}

	char verticalVel[2];	//Vertical velocity
	verticalVel[0] = 0x00;
	verticalVel[1] = (VelVertical/64);

	char tempHorVerVel[3];	//Temporary Horizontal/Vertical Velocity
	tempHorVerVel[2] = verticalVel[1];
	tempHorVerVel[1] = (0x0F & verticalVel[0]) >> 4;
	tempHorVerVel[1] = tempHorVerVel[1] | ((0x0F & horizontalVel[1]) << 4);
	tempHorVerVel[0] = (0xF0 & horizontalVel[1]) >> 4;
	tempHorVerVel[0] = tempHorVerVel[0] | ((0x0F & horizontalVel[0]) << 4);

	message[15] = tempHorVerVel[0];
	message[16] = tempHorVerVel[1];
	message[17] = tempHorVerVel[2];

	float resolutionAngular = 360.0/256.0;	//Resolution of Track/Heading field (approx. 1.4 degrees)
	message[18] = (float)Heading/resolutionAngular;
	message[19] = emitterCat;

	uint16 i = 0;

	for(i=0; i<8; i++)
	{
		message[i+20] = tailNum[i];
	}

	message[28] = priorityCode;

	char payload[28];
	memcpy(payload,message+1,27);
	payload[27] = 0;

	//CRC
	uint16 crc16 = crcCompute(payload,length-4);

	message[29] = crc16 & 0xFF;
	message[30] = crc16 >> 8;

	message[31] = 0x7E; //Flag byte
}

//GDL90 Traffic Report Message
void genTraffic(struct target tgt, char *message, size_t length)
{
	message[0] = 0x7E;	//Flag byte
	message[1] = 0x14;	//MessageID

	//Traffic Alert Status / Address Type
	message[2] = 0x00;

	//ICAO Address
	message[3] = (tgt.ICAOaddress >> 16) & 0xFF;
	message[4] = (tgt.ICAOaddress >> 8) & 0xFF;
	message[5] = tgt.ICAOaddress & 0xFF;

	//LatLong
	char tmp[3];

	makeLatLng(tgt.lat, tmp);	//Make latitude
	message[6] = tmp[0]; // Latitude.
	message[7] = tmp[1]; // Latitude.
	message[8] = tmp[2]; // Latitude.

	makeLatLng(tgt.lon, tmp);	//Make longitude
	message[9] = tmp[0];  // Longitude.
	message[10] = tmp[1];  // Longitude.
	message[11] = tmp[2]; // Longitude.

	if(tgt.alt == 999999){
		uint16 altitudeint = 0xFFF & 0x09;
		message[12] = altitudeint;
		message[13] = altitudeint << 8;
	}else
	{
		char altitude[2];
		uint32 tmpAlt = (tgt.alt + 1000)/25;

		altitude[0] = (tmpAlt & 0x000FF0) >> 4;
		altitude[1] = ((tmpAlt & 0x0000FF));
		altitude[1] = (altitude[1] << 4) ^ 0x09;

		message[12] = altitude[0];
		message[13] = altitude[1];
	}

	message[14] = (tgt.NIC << 4) ^ tgt.NACp; //10, 9; NIC, NACP

	char horizontalVel[2];	//Horizontal velocity
	if(NULL == tgt.velHorizontal)
	{
		horizontalVel[0] = 0xFF;
		horizontalVel[1] = 0xF0;
	}else
	{
		horizontalVel[0] = 0x00;
		horizontalVel[1] = tgt.velHorizontal;
	}

	char verticalVel[2];	//Vertical velocity
	verticalVel[0] = 0x00;
	verticalVel[1] = (tgt.velVertical/64);

	char tempHorVerVel[3];	//Temporary Horizontal/Vertical Velocity
	tempHorVerVel[2] = verticalVel[1];
	tempHorVerVel[1] = (0x0F & verticalVel[0]) >> 4;
	tempHorVerVel[1] = tempHorVerVel[1] | ((0x0F & horizontalVel[1]) << 4);
	tempHorVerVel[0] = (0xF0 & horizontalVel[1]) >> 4;
	tempHorVerVel[0] = tempHorVerVel[0] | ((0x0F & horizontalVel[0]) << 4);

	message[15] = tempHorVerVel[0];
	message[16] = tempHorVerVel[1];
	message[17] = tempHorVerVel[2];

	float resolutionAngular = 360.0/256.0;	//Resolution of Track/Heading field (approx. 1.4 degrees)
	message[18] = (float)tgt.velHorDeg/resolutionAngular;
	message[19] = tgt.emitterCat;

	uint16 i = 0;

	for(i=0; i<8; i++)
	{
		message[i+20] = tgt.tailNum[i];
	}

	message[28] = tgt.priorityCode;

	char payload[28];
	memcpy(payload,message+1,27);
	payload[27] = 0;

	//CRC
	uint16 crc16 = crcCompute(payload,length-4);

	message[29] = crc16 & 0xFF;
	message[30] = crc16 >> 8;

	message[31] = 0x7E; //Flag byte
}

//GDL90 Ownship Geometric Altitude Message
void genGeoalt(char *message, size_t length)
{
	message[0] = 0x7E;	//Flag byte
	message[1] = 0x0B;	//MessageID

	//Ownship Geo Altitude
	uint16 altitude = GeoAlt / 5;
	message[2] = altitude >> 8;
	message[3] = altitude & 0x00FF;

	//Vertical Metrics
	message[4] = 0x00;
	message[5] = 0x0A;

	char payload[6];
	memcpy(payload,message+1,5);
	payload[5] = 0;

	//CRC
	uint16 crc16 = crcCompute(payload,length-4);

	message[6] = crc16 & 0xFF;
	message[7] = crc16 >> 8;

	message[8] = 0x7E;	//Flag byte0
}

extern void runCRC()
{
	crcInit();
}

// STRATUX MAKELATLNG FUNCTION
void makeLatLng(float input, char *bytes)
{
	float resolution = (180.0 / 8388608.0);	//Resolution 180/2^23 degrees

	int32 v = input / resolution;	//TBD: Add Floor(...) or Ceil(...)?

	bytes[0] = (v & 0xFF0000) >> 16;
	bytes[1] = (v & 0x00FF00) >> 8;
	bytes[2] = v & 0x0000FF;
}

//CRC-CCITT
void crcInit()
{
 uint16 i, bitctr, crc;

 for (i = 0; i < 256; i++)
 {
	crc = (i << 8);
	for (bitctr = 0; bitctr < 8; bitctr++)
	{
		crc = (crc << 1) ^ ((crc & 0x8000) ? 0x1021 : 0);
	}
	Crc16Table[i] = crc;
 }
}

uint16 crcCompute(char *block, int length)
{
 uint32 i;
 uint16 crc = 0;

 for (i = 0; i < length; i++)
 {
	crc = Crc16Table[crc >> 8] ^ (crc << 8) ^ block[i];
 }

 return crc;
}

//TRAFFIC REPORT EXAMPLE
/*
{
	char msg[28];
	msg[0] = 0x14;
	msg[1] = 0x00;
	msg[2] = 0xAB;
	msg[3] = 0x45;
	msg[4] = 0x49;
	msg[5] = 0x1F;
	msg[6] = 0xEF;
	msg[7] = 0x15;
	msg[8] = 0xA8;
	msg[9] = 0x89;
	msg[10] = 0x78;
	msg[11] = 0x0F;
	msg[12] = 0x09;
	msg[13] = 0xA9;
	msg[14] = 0x07;
	msg[15] = 0xB0;
	msg[16] = 0x01;
	msg[17] = 0x20;
	msg[18] = 0x01;
	msg[19] = 0x4E;
	msg[20] = 0x38;
	msg[21] = 0x32;
	msg[22] = 0x35;
	msg[23] = 0x56;
	msg[24] = 0x20;
	msg[25] = 0x20;
	msg[26] = 0x20;
	msg[27] = 0x00;
}*/
